/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_wfc(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_wfc(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_wfc(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


    #include "../HelperClasses.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlagsList__SWIG_0() {
  void * jresult ;
  WFC::List< unsigned short > *result = 0 ;
  
  result = (WFC::List< unsigned short > *)new WFC::List< unsigned short >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlagsList__SWIG_1(unsigned short jarg1) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  unsigned short temp1 ;
  WFC::List< unsigned short > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  result = (WFC::List< unsigned short > *)new WFC::List< unsigned short >((unsigned short const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlagsList__SWIG_2(unsigned short jarg1, unsigned short jarg2) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp1 ;
  unsigned short temp2 ;
  WFC::List< unsigned short > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (WFC::List< unsigned short > *)new WFC::List< unsigned short >((unsigned short const &)*arg1,(unsigned short const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlagsList__SWIG_3(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp1 ;
  unsigned short temp2 ;
  unsigned short temp3 ;
  WFC::List< unsigned short > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  result = (WFC::List< unsigned short > *)new WFC::List< unsigned short >((unsigned short const &)*arg1,(unsigned short const &)*arg2,(unsigned short const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlagsList__SWIG_4(unsigned short jarg1, unsigned short jarg2, unsigned short jarg3, unsigned short jarg4) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short *arg3 = 0 ;
  unsigned short *arg4 = 0 ;
  unsigned short temp1 ;
  unsigned short temp2 ;
  unsigned short temp3 ;
  unsigned short temp4 ;
  WFC::List< unsigned short > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  temp4 = (unsigned short)jarg4; 
  arg4 = &temp4; 
  result = (WFC::List< unsigned short > *)new WFC::List< unsigned short >((unsigned short const &)*arg1,(unsigned short const &)*arg2,(unsigned short const &)*arg3,(unsigned short const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_eFlagsList_GetSize(void * jarg1) {
  unsigned long jresult ;
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  size_t result;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  result = ((WFC::List< unsigned short > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eFlagsList_GetData__SWIG_0(void * jarg1) {
  void * jresult ;
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  result = (unsigned short *)(arg1)->GetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_Resize(void * jarg1, unsigned long jarg2) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  size_t arg2 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Resize(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_Reserve(void * jarg1, unsigned long jarg2) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  size_t arg2 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Reserve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_PushBack(void * jarg1, unsigned short jarg2) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->PushBack((unsigned short const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_PushFront(void * jarg1, unsigned short jarg2) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->PushFront((unsigned short const &)*arg2);
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_eFlagsList_PopBack(void * jarg1) {
  unsigned short jresult ;
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  unsigned short result;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  result = (unsigned short)(arg1)->PopBack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_eFlagsList_PopFront(void * jarg1) {
  unsigned short jresult ;
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  unsigned short result;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  result = (unsigned short)(arg1)->PopFront();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_RemoveAt(void * jarg1, unsigned long jarg2) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  size_t arg2 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->RemoveAt(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_Insert__SWIG_0(void * jarg1, unsigned long jarg2, unsigned short jarg3) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  size_t arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  arg2 = (size_t)jarg2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  (arg1)->Insert(arg2,(unsigned short const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_Insert__SWIG_1(void * jarg1, unsigned long jarg2, void * jarg3) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  size_t arg2 ;
  WFC::List< unsigned short > *arg3 = 0 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (WFC::List< unsigned short > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "WFC::List< unsigned short > const & type is null", 0);
    return ;
  } 
  (arg1)->Insert(arg2,(WFC::List< unsigned short > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlagsList_Clear(void * jarg1) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eFlagsList_GetBack__SWIG_0(void * jarg1) {
  void * jresult ;
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  result = (unsigned short *) &(arg1)->GetBack();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_eFlagsList(void * jarg1) {
  WFC::List< unsigned short > *arg1 = (WFC::List< unsigned short > *) 0 ;
  
  arg1 = (WFC::List< unsigned short > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eFlags_ToMask(unsigned short jarg1) {
  int jresult ;
  unsigned short arg1 ;
  int result;
  
  arg1 = (unsigned short)jarg1; 
  result = (int)WFC::EnumFlags< unsigned short,int,55 >::SWIGTEMPLATEDISAMBIGUATOR ToMask(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_eFlags_All() {
  void * jresult ;
  WFC::EnumFlags< unsigned short,int,55 >::This_t result;
  
  result = WFC::EnumFlags< unsigned short,int,55 >::SWIGTEMPLATEDISAMBIGUATOR All();
  jresult = new WFC::EnumFlags< unsigned short,int,55 >::This_t((const WFC::EnumFlags< unsigned short,int,55 >::This_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlags_BitMask_set(void * jarg1, int jarg2) {
  WFC::EnumFlags< unsigned short,int,55 > *arg1 = (WFC::EnumFlags< unsigned short,int,55 > *) 0 ;
  int arg2 ;
  
  arg1 = (WFC::EnumFlags< unsigned short,int,55 > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BitMask = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_eFlags_BitMask_get(void * jarg1) {
  int jresult ;
  WFC::EnumFlags< unsigned short,int,55 > *arg1 = (WFC::EnumFlags< unsigned short,int,55 > *) 0 ;
  int result;
  
  arg1 = (WFC::EnumFlags< unsigned short,int,55 > *)jarg1; 
  result = (int) ((arg1)->BitMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlags__SWIG_0(int jarg1) {
  void * jresult ;
  int arg1 ;
  WFC::EnumFlags< unsigned short,int,55 > *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (WFC::EnumFlags< unsigned short,int,55 > *)new WFC::EnumFlags< unsigned short,int,55 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlags__SWIG_1() {
  void * jresult ;
  WFC::EnumFlags< unsigned short,int,55 > *result = 0 ;
  
  result = (WFC::EnumFlags< unsigned short,int,55 > *)new WFC::EnumFlags< unsigned short,int,55 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_eFlags__SWIG_2(unsigned short jarg1) {
  void * jresult ;
  unsigned short arg1 ;
  WFC::EnumFlags< unsigned short,int,55 > *result = 0 ;
  
  arg1 = (unsigned short)jarg1; 
  result = (WFC::EnumFlags< unsigned short,int,55 > *)new WFC::EnumFlags< unsigned short,int,55 >(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_eFlags_Contains(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  WFC::EnumFlags< unsigned short,int,55 > *arg1 = (WFC::EnumFlags< unsigned short,int,55 > *) 0 ;
  unsigned short arg2 ;
  bool result;
  
  arg1 = (WFC::EnumFlags< unsigned short,int,55 > *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  result = (bool)((WFC::EnumFlags< unsigned short,int,55 > const *)arg1)->Contains(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_eFlags_Enumerate(void * jarg1, void * jarg2) {
  WFC::EnumFlags< unsigned short,int,55 > *arg1 = (WFC::EnumFlags< unsigned short,int,55 > *) 0 ;
  WFC::List< unsigned short > *arg2 = 0 ;
  
  arg1 = (WFC::EnumFlags< unsigned short,int,55 > *)jarg1; 
  arg2 = (WFC::List< unsigned short > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "WFC::List< unsigned short > & type is null", 0);
    return ;
  } 
  (arg1)->Enumerate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_eFlags(void * jarg1) {
  WFC::EnumFlags< unsigned short,int,55 > *arg1 = (WFC::EnumFlags< unsigned short,int,55 > *) 0 ;
  
  arg1 = (WFC::EnumFlags< unsigned short,int,55 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_dictIntDouble_GetSize(void * jarg1) {
  unsigned long jresult ;
  WFC::Dictionary< int,double,std::hash< int > > *arg1 = (WFC::Dictionary< int,double,std::hash< int > > *) 0 ;
  size_t result;
  
  arg1 = (WFC::Dictionary< int,double,std::hash< int > > *)jarg1; 
  result = ((WFC::Dictionary< int,double,std::hash< int > > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dictIntDouble_Reserve(void * jarg1, unsigned long jarg2) {
  WFC::Dictionary< int,double,std::hash< int > > *arg1 = (WFC::Dictionary< int,double,std::hash< int > > *) 0 ;
  size_t arg2 ;
  
  arg1 = (WFC::Dictionary< int,double,std::hash< int > > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Reserve(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_dictIntDouble_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  WFC::Dictionary< int,double,std::hash< int > > *arg1 = (WFC::Dictionary< int,double,std::hash< int > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (WFC::Dictionary< int,double,std::hash< int > > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)((WFC::Dictionary< int,double,std::hash< int > > const *)arg1)->Contains((int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_dictIntDouble_Clear(void * jarg1) {
  WFC::Dictionary< int,double,std::hash< int > > *arg1 = (WFC::Dictionary< int,double,std::hash< int > > *) 0 ;
  
  arg1 = (WFC::Dictionary< int,double,std::hash< int > > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_dictIntDouble_TryGet__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  WFC::Dictionary< int,double,std::hash< int > > *arg1 = (WFC::Dictionary< int,double,std::hash< int > > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  double *result = 0 ;
  
  arg1 = (WFC::Dictionary< int,double,std::hash< int > > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (double *)((WFC::Dictionary< int,double,std::hash< int > > const *)arg1)->TryGet((int const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_dictIntDouble_Get__SWIG_0(void * jarg1, int jarg2, double jarg3) {
  double jresult ;
  WFC::Dictionary< int,double,std::hash< int > > *arg1 = (WFC::Dictionary< int,double,std::hash< int > > *) 0 ;
  int *arg2 = 0 ;
  double *arg3 = 0 ;
  int temp2 ;
  double temp3 ;
  double *result = 0 ;
  
  arg1 = (WFC::Dictionary< int,double,std::hash< int > > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  result = (double *) &((WFC::Dictionary< int,double,std::hash< int > > const *)arg1)->Get((int const &)*arg2,(double const &)*arg3);
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_dictIntDouble() {
  void * jresult ;
  WFC::Dictionary< int,double,std::hash< int > > *result = 0 ;
  
  result = (WFC::Dictionary< int,double,std::hash< int > > *)new WFC::Dictionary< int,double,std::hash< int > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_dictIntDouble(void * jarg1) {
  WFC::Dictionary< int,double,std::hash< int > > *arg1 = (WFC::Dictionary< int,double,std::hash< int > > *) 0 ;
  
  arg1 = (WFC::Dictionary< int,double,std::hash< int > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_setOfUInts_GetSize(void * jarg1) {
  unsigned long jresult ;
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  size_t result;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  result = ((WFC::Set< unsigned int,std::hash< unsigned int > > const *)arg1)->GetSize();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_setOfUInts_Reserve(void * jarg1, unsigned long jarg2) {
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  size_t arg2 ;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->Reserve(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_setOfUInts_Add__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)(arg1)->Add((unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_setOfUInts_Add__SWIG_1(void * jarg1, void * jarg2) {
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg2 = 0 ;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  arg2 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "WFC::Set< unsigned int,std::hash< unsigned int > > const & type is null", 0);
    return ;
  } 
  (arg1)->Add((WFC::Set< unsigned int,std::hash< unsigned int > > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_setOfUInts_Erase__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)(arg1)->Erase((unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_setOfUInts_Erase__SWIG_1(void * jarg1, void * jarg2) {
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg2 = 0 ;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  arg2 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "WFC::Set< unsigned int,std::hash< unsigned int > > const & type is null", 0);
    return ;
  } 
  (arg1)->Erase((WFC::Set< unsigned int,std::hash< unsigned int > > const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_setOfUInts_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  unsigned int *arg2 = 0 ;
  unsigned int temp2 ;
  bool result;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  temp2 = (unsigned int)jarg2; 
  arg2 = &temp2; 
  result = (bool)((WFC::Set< unsigned int,std::hash< unsigned int > > const *)arg1)->Contains((unsigned int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_setOfUInts_Clear(void * jarg1) {
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_setOfUInts() {
  void * jresult ;
  WFC::Set< unsigned int,std::hash< unsigned int > > *result = 0 ;
  
  result = (WFC::Set< unsigned int,std::hash< unsigned int > > *)new WFC::Set< unsigned int,std::hash< unsigned int > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_setOfUInts(void * jarg1) {
  WFC::Set< unsigned int,std::hash< unsigned int > > *arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *) 0 ;
  
  arg1 = (WFC::Set< unsigned int,std::hash< unsigned int > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_algoState_HasValue_set(void * jarg1, unsigned int jarg2) {
  WFC::Nullable< bool > *arg1 = (WFC::Nullable< bool > *) 0 ;
  bool arg2 ;
  
  arg1 = (WFC::Nullable< bool > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HasValue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_algoState_HasValue_get(void * jarg1) {
  unsigned int jresult ;
  WFC::Nullable< bool > *arg1 = (WFC::Nullable< bool > *) 0 ;
  bool result;
  
  arg1 = (WFC::Nullable< bool > *)jarg1; 
  result = (bool) ((arg1)->HasValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_algoState_Value_set(void * jarg1, unsigned int jarg2) {
  WFC::Nullable< bool > *arg1 = (WFC::Nullable< bool > *) 0 ;
  bool arg2 ;
  
  arg1 = (WFC::Nullable< bool > *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_algoState_Value_get(void * jarg1) {
  unsigned int jresult ;
  WFC::Nullable< bool > *arg1 = (WFC::Nullable< bool > *) 0 ;
  bool result;
  
  arg1 = (WFC::Nullable< bool > *)jarg1; 
  result = (bool) ((arg1)->Value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_algoState__SWIG_0() {
  void * jresult ;
  WFC::Nullable< bool > *result = 0 ;
  
  result = (WFC::Nullable< bool > *)new WFC::Nullable< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_algoState__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool temp1 ;
  WFC::Nullable< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  result = (WFC::Nullable< bool > *)new WFC::Nullable< bool >((bool const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_algoState__SWIG_2(void * jarg1) {
  void * jresult ;
  WFC::Nullable< bool > *arg1 = 0 ;
  WFC::Nullable< bool > *result = 0 ;
  
  arg1 = (WFC::Nullable< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "WFC::Nullable< bool > const & type is null", 0);
    return 0;
  } 
  result = (WFC::Nullable< bool > *)new WFC::Nullable< bool >((WFC::Nullable< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_algoState(void * jarg1) {
  WFC::Nullable< bool > *arg1 = (WFC::Nullable< bool > *) 0 ;
  
  arg1 = (WFC::Nullable< bool > *)jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

