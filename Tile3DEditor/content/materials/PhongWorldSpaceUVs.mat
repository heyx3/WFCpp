# This is an example of a material for the engine's material system.
# It is a standard TOML file.
# It uses a hypothetical "Phong" material type, and adds the following custom features:
#  * World-space UV's for the usual textures
#  * Applies a faint see-through effect.
#  * A custom gradient for lighting (as a texture)
#  * A contrast effect to its final color based on another texture that uses mesh UV's

#TODO: Stencil settings.
#TODO: Alpha-test settings.
#TODO: Depth-test settings.

type = "Phong" # A simple Phong-lit model.

# Exists for all materials:
faceCull = "off" # Options are On, Off, and Backwards

# Exists for only 3D materials:
occlusionCull = true # Defaults to true. If false, meshes with this material
                     #     will always be drawn even if their bounds are outside
                     #     the camera's view frustum.
                     # This if for meshes with wacky vertex shaders,
                     #    where the bounds are hard to estimate.

# Exists for only 3D materials:
forceNoNormalMap = false # Defaults to false.
                         # If true, this material will not have its usual "NormalMap" parameter.
forceNoDiffuseMap = false # Defaults to false.
                          # If true, this material will not have its usual "DiffuseMap" parameter.


# Exists for all materials:
configuration = '''
'''
definitions = '''
//Any custom defines that should exist in all shaders of this material.
struct MyData { };
float ProcessData(MyData d) { return 0.5; }
'''

# Exists for all materials:
[blending] # Default is this: opaque blending.
    src = "One"
    dest = "Zero"
    op = "Add"

# Exists for only 3D materials:
[queue] # Determines when this material is drawn in the render pipeline.
        # Uses ascending order -- larger numbers are rendered later.
    major = 1 # 0 is when Opaque objects are normally ordered;
              # 1 is when Transparent objects are normally ordered.
              # Negative values are allowed; these will be drawn before standard opaque objects.
    minor = 0 # Orders draw calls within the "major" queue value. Defaults to 0.

# Exists for only 3D materials:
[screenGrab]
    mode = "Depth" # Defaults to "None". Other options are "Color" and "ColorDepth".
                   # If not "None", this material will have access to the color and/or depth
                   #    render target containing almost everything that was rendered before it.
                   # It can even contain the other render passes that use "screenGrab", if this material
                   #    has a higher "offset".
    minQuality = 1 # Shader quality level below this value will disable the screen grab,
                   #     replacing the color texture with a single black pixel
                   #     and the depth texture with a single 90%-grey pixel.
                   # The shader param "s_HasScreenGrab" will tell you whether it's enabled.
    queueOffset = 0 # Every material with offset N will access a screen grab
                    #     that includes every other "screen-grabbing" material with offset less than N.
                    # In other words, materials are ordered based on this integer number (inside their queue),
                    #     and every time a new queue offset is reached, the current screen render texture
                    #     is copied back into the screen grab texture so that future render passes can see
                    #     the newest objects.

# Exists for all materials:
[params]
    [params.float.u_WorldScale] # World UV's scale.
        default = 10.0
        min = 0
    
    [params.tex2d.u_ContrastMap]
        default = "black" # Defaults to a 1x1 black texture.
        filter = "linear" # Options: "Point", "Linear", "Trilinear".
                            # If not set, then a specific value isn't forced.
        wrapping = "repeat" # Options: "Repeat", "Clamp", "MirrorRepeat", "MirrorClamp"
                            # If not set, then a specific value isn't forced.
        requireMips = false # Defaults to false.

    [params.gradient.u_LightRamp]
        default = "white" # Defaults to a 1x1 white texture.
        resolution = 128 # Horizontal resolution (vertical is always 1). Defaults to 128
        filter = "linear" # Options: "Point", "Linear". Default: Linear
        wrapping = "repeat" # Options: "Repeat", "Clamp", "MirrorRepeat", "MirrorClamp"
                            # Default: Clamp

    #TODO: Cube-map example.

            

# Exists for all materials, with variation:
[vertexShader]

    [[vertexShader.customOutput]] # A user-defined vertex shader output/fragment shader input.
        name = "WorldUV"
        type = "vec2"

    configuration = '''
//Configuring the vertex shader:
'''
    definitions = '''
//Defining stuff for the vertex shader:
'''

    [vertexShader.customModules] # Changing how various "modules" of the shader are implemented.
        OtherOutputs = '''
//A "module" for users to set their custom vertex shader outputs.
vOut_WorldUV = vOut_WorldPos.xy * u_WorldScale;
'''

[fragmentShader]

    configuration = '''
//Configuring the fragment shader:
layout (depth_unchanged) out float gl_FragDepth; //A no-op; pls ignore
'''
    definitions = '''
//Defining stuff for the fragment shader:
'''

    [fragmentShader.customModules]
        GetDiffuse = '''
//Sample diffuse texture with world-space UVs.
vec4 diffuse4 = texture(u_DiffuseMap, fIn_WorldUV);
v_diffuseColor = diffuse4.rgb;
v_alpha = diffuse4.a;
'''
        ApplyLight = '''
//Apply the color ramp to the total sum of incoming light.
float litBrightness = dot(totalLight, vec3(0.2126f, 0.7152f, 0.0722f)); //Luma greyscale value.
v_totalLight *= texture(u_LightRamp, litBrightness).r; //Dim the light based on the ramp.

//Also add the see-through effect to the scene.
vec3 behindColor = texture(u_ScreenColor, fIn_ScreenUV).rgb;
v_diffuseColor = lerp(v_diffuseColor,
                      step(0.775f, behindColor),
                      0.225f);

//Finally, apply the light.
v_surfaceColor = v_totalLight * v_diffuseColor;
'''
        Finalize = '''
//Run the final color through a contrast effect.
float contrast = u_ContrastScale * texture(u_ContrastMap, fIn_UV).r;
fOut.rgb = lerp(fOut.rgb,
                smoothstep(0, 1, smoothstep(0, 1, smoothstep(0, 1, fOut_Color.rgb))),
                u_ContrastScale); //Apply the contrast.
'''